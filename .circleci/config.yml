# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  python: circleci/python@1.0.0

# https://circleci.com/docs/using-matrix-jobs/
executors:
  docker: # Docker using the Base Convenience Image
    docker:
      - image: python:3.10
  linux: # a Linux VM running Ubuntu 20.04
    machine:
      image: ubuntu-2004:202107-02
  windows:
    resource_class: 'windows.medium'
    machine:
      image: 'windows-server-2022-gui:current'
      # shell: 'powershell.exe -ExecutionPolicy Bypass'
  macos: # macos executor running Xcode
    macos:
      xcode: 14.2.0


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    parameters:
      platform:
        type: string
      python_version:
        type: string
    executor: << parameters.platform >>
    
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - when:
          condition:
            equal: [ windows, <<parameters.platform>> ]
          steps:
            - run:
                name: "Windows checkout"
                command: |
                  echo << pipeline.trigger_parameters.github_app.repo_url >>
                  git clone -b "$CIRCLE_BRANCH" << pipeline.trigger_parameters.github_app.repo_url >>
                  dir
      - unless:
          condition:
            equal: [ windows, <<parameters.platform>> ]
          steps:
            - checkout
      - when:
          condition:
            equal: [ linux, <<parameters.platform>> ]
          steps:
            - run:
                name: "Install python"
                command: |
                  sudo apt update
                  sudo apt-get install -y build-essential git
                  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
                  brew install python@<<parameters.python_version>>
                  ln -s /home/linuxbrew/.linuxbrew/bin/python<<parameters.python_version>> /home/linuxbrew/.linuxbrew/bin/python3
                  echo 'export PATH=/home/linuxbrew/.linuxbrew/bin:"$PATH"' >> "$BASH_ENV"
      - when:
          condition:
            equal: [ macos, <<parameters.platform>> ]
          steps:
            - run:
                name: "Install python"
                command: |
                  brew install python@<<parameters.python_version>>
                  ln -s /usr/local/bin/python<<parameters.python_version>> /usr/local/bin/python3
                  echo 'export PATH=/usr/local/bin:"$PATH"' >> "$BASH_ENV"
      - when:
          condition:
            equal: [ windows, <<parameters.platform>> ]
          steps:
            - run:
                name: "Install python"
                shell: powershell.exe
                command: |
                  choco install pyenv-win --force -y
                  refreshenv
                  pyenv install <<parameters.python_version>>
                  pyenv global <<parameters.python_version>>
                  $env:Path = 'C:\Users\circleci\.pyenv\pyenv-win\bin;C:\Users\circleci\.pyenv\pyenv-win\shims;' + $env:Path
                  python --version
                  pip install --upgrade pip
                  pip install poetry
                  cd pyqt-helloworld
                  poetry install
                  poetry activate
                  pyinstaller --onefile --clean --windowed pyqt_helloworld\pyqt_helloworld.py
      - unless:
          condition:
            equal: [ windows, <<parameters.platform>> ]
          steps:
            - run:
                name: "Check python version"
                command: |
                  python3 --version
                  which python3
            
            - run:
                name: "Install dependencies"
                command: |
                  python3 -m pip install --upgrade pip
                  python3 -m pip install poetry
                  python3 -m poetry install
            - run:
                name: "Build exe"
                command: |
                  source .venv/bin/activate
                  pyinstaller --onefile --clean --windowed pyqt_helloworld/pyqt_helloworld.py
            
      - store_artifacts:
          path: dist


# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - say-hello:
          matrix:
            parameters:
              python_version: ["3.10"]
              platform: [docker, linux, macos, windows]
